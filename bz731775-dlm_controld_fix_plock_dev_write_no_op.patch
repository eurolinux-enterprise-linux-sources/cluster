commit 95d90a01d89a610074a4817f1f2cbe67419a7654
Author: David Teigland <teigland@redhat.com>
Date:   Thu Aug 18 14:18:04 2011 -0500

    dlm_controld: fix plock dev_write no op
    
    When a plock unlock is received due to the file
    being closed (the CLOSE flag is set), we should
    not write an unlock result back to the kernel.
    If we do, the kernel, which does not expect a
    reply, will report the error "dev_write no op".
    
    In cases where dlm_controld encounters and error
    handling the unlock operation, it was writing
    the error result back to the kernel, even though
    the unlock was flagged with CLOSE.  The fix is
    to check for the CLOSE flag and skip writing
    the error result, as we do with normal results.
    
    This problem is especially visible when using
    flocks (not plocks).  This is because the kernel
    generates extraneous plock unlock requests
    when files are closed with flocks.  Because
    dlm_controld finds no plocks on the files,
    it replies to the kernel with an error, rather
    than skipping the reply to do CLOSE.
    
    bz 731775
    
    Signed-off-by: David Teigland <teigland@redhat.com>

diff --git a/group/dlm_controld/plock.c b/group/dlm_controld/plock.c
index 6d5dea8..556993b 100644
--- a/group/dlm_controld/plock.c
+++ b/group/dlm_controld/plock.c
@@ -1583,8 +1583,10 @@ void process_plocks(int ci)
 	return;
 
  fail:
-	info.rv = rv;
-	rv = write(plock_device_fd, &info, sizeof(info));
+	if (!(info.flags & DLM_PLOCK_FL_CLOSE)) {
+		info.rv = rv;
+		rv = write(plock_device_fd, &info, sizeof(info));
+	}
 }
 
 void process_saved_plocks(struct lockspace *ls)
